/******************************************************************************/
/***         Generated by IBExpert 2021.3.29.1 14.11.2023 15:28:12          ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR FACULTY_ID_GENERATOR;

CREATE GENERATOR GROUP_ID_GENERATOR;

CREATE GENERATOR SPECIALTY_ID_GENERATOR;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION FACULTY_EXISTS_ERROR 'Факультет с таким названием уже существует.';

CREATE EXCEPTION FACULTY_NOT_EMPTY_ERROR 'Группа не может быть удалена, так как имеет некоторые факультеты.';

CREATE EXCEPTION FACULTY_NOT_EXISTS_ERROR 'Факультета с таким идентификатором не существует';

CREATE EXCEPTION GROUP_EXISTS_ERROR 'Такая группа уже существует.';

CREATE EXCEPTION GROUP_NOT_EMPTY_ERROR 'Группа не может быть удалена, так как содержит некоторых студентов.';

CREATE EXCEPTION GROUP_NOT_EXISTS_ERROR 'Группы с таким идентификатором не существует';

CREATE EXCEPTION SPECIALTY_EXISTS_ERROR 'Специальность с таким названием или шифром уже существует.';

CREATE EXCEPTION SPECIALTY_NOT_EMPTY_ERROR 'Специальность не может быть удалена, так как к ней привязаны некоторые группы.';

CREATE EXCEPTION SPECIALTY_NOT_EXISTS_ERROR 'Специальности с таким идентификатором не существует';

CREATE EXCEPTION STUDENT_EXISTS_ERROR 'Студент с таким номером зачетки уже существует.';



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE DELETE_FACULTY (
    FACULTY_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_GROUP (
    GROUP_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_SPECIALTY (
    SPECIALTY_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_STUDENT (
    RECORD_BOOK_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE FACULTY_QUALIFICATIONS (
    FACULTY_ID INTEGER)
RETURNS (
    SPECIALTY_NAME VARCHAR(50),
    QUALIFICATION VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GROUP_AVERAGE_SALARY (
    GROUP_ID INTEGER)
RETURNS (
    FACULTY_NAME VARCHAR(50),
    SPECIALTY_NAME VARCHAR(50),
    GROUP_FULL_CIPHER VARCHAR(10),
    AVERAGE_SALARY NUMERIC(18,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE GROUPS_ENTERED_SINCE_YEAR (
    MIN_ENTERING_YEAR INTEGER)
RETURNS (
    GROUP_FULL_CIPHER VARCHAR(10),
    SPECIALTY_NAME VARCHAR(50))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE INSERT_FACULTY (
    FACULTY_NAME VARCHAR(50),
    DIRECTOR_NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_GROUP (
    GROUP_CIPHER VARCHAR(5),
    ENTERING_YEAR INTEGER,
    GROUP_NUMBER INTEGER,
    SPECIALTY_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_SPECIALTY (
    SPECIALTY_CIPHER VARCHAR(5),
    SPECIALTY_NAME VARCHAR(50),
    QUALIFICATION VARCHAR(50),
    FACULTY_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_STUDENT (
    RECORD_BOOK_ID INTEGER,
    LAST_NAME VARCHAR(15),
    FIRST_NAME VARCHAR(15),
    MIDDLE_NAME VARCHAR(15),
    FATHER_SALARY NUMERIC(9,2),
    MOTHER_SALARY NUMERIC(9,2),
    FAMILY_MEMBERS_NUMBER INTEGER,
    GROUP_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE STUDENTS_AVERAGE_SALARY_LESS (
    GROUP_ID INTEGER,
    AVG_SALARY_MAX NUMERIC(9,2))
RETURNS (
    STUDENT_FULL_NAME VARCHAR(47),
    AVERAGE_SALARY NUMERIC(18,2))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE UPDATE_FACULTY (
    FACULTY_ID INTEGER,
    FACULTY_NAME VARCHAR(50),
    DIRECTOR_NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_GROUP (
    GROUP_ID INTEGER,
    GROUP_CIPHER VARCHAR(5),
    ENTERING_YEAR INTEGER,
    GROUP_NUMBER INTEGER,
    SPECIALTY_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_SPECIALTY (
    SPECIALTY_ID INTEGER,
    SPECIALTY_CIPHER VARCHAR(5),
    SPECIALTY_NAME VARCHAR(50),
    QUALIFICATION VARCHAR(50),
    FACULTY_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_STUDENT (
    RECORD_BOOK_ID INTEGER,
    LAST_NAME VARCHAR(15),
    FIRST_NAME VARCHAR(15),
    MIDDLE_NAME VARCHAR(15),
    FATHER_SALARY NUMERIC(9,2),
    MOTHER_SALARY NUMERIC(9,2),
    FAMILY_MEMBERS_NUMBER INTEGER,
    GROUP_ID INTEGER)
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE FACULTIES (
    FACULTY_ID     INTEGER NOT NULL,
    FACULTY_NAME   VARCHAR(50) NOT NULL,
    DIRECTOR_NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE GROUPS (
    GROUP_ID           INTEGER NOT NULL,
    GROUP_CIPHER       VARCHAR(5) NOT NULL,
    ENTERING_YEAR      INTEGER NOT NULL,
    GROUP_NUMBER       INTEGER NOT NULL,
    GROUP_FULL_CIPHER  COMPUTED BY (group_cipher || '-' || cast(mod(entering_year, 100) as varchar(2)) || '-' || cast(group_number as varchar(1))),
    SPECIALTY_ID       INTEGER NOT NULL
);

CREATE TABLE SPECIALTIES (
    SPECIALTY_ID      INTEGER NOT NULL,
    SPECIALTY_CIPHER  VARCHAR(5) NOT NULL,
    SPECIALTY_NAME    VARCHAR(50) NOT NULL,
    QUALIFICATION     VARCHAR(50) NOT NULL,
    FACULTY_ID        INTEGER NOT NULL
);

CREATE TABLE STUDENTS (
    RECORD_BOOK_ID         INTEGER NOT NULL,
    LAST_NAME              VARCHAR(15) NOT NULL,
    FIRST_NAME             VARCHAR(15) NOT NULL,
    MIDDLE_NAME            VARCHAR(15) NOT NULL,
    FULL_NAME              COMPUTED BY (last_name || ' ' || first_name || ' ' || middle_name),
    FATHER_SALARY          NUMERIC(9,2) NOT NULL,
    MOTHER_SALARY          NUMERIC(9,2) NOT NULL,
    FAMILY_MEMBERS_NUMBER  INTEGER NOT NULL,
    GROUP_ID               INTEGER NOT NULL,
    AVERAGE_SALARY         COMPUTED BY ((father_salary + mother_salary) / family_members_number)
);



/******************************************************************************/
/***                                 Views                                  ***/
/******************************************************************************/


/* View: AVERAGE_SALARY */
CREATE VIEW AVERAGE_SALARY(
    FACULTY_NAME,
    SPECIALTY_NAME,
    GROUP_FULL_CIPHER,
    STUDENT_FULL_NAME,
    AVERAGE_SALARY)
AS
-- Средний доход каждого студента с указанием группы, специальности и факультета. --
-- (1-ый выходной документ)

select F.faculty_name, S.specialty_name, G.group_full_cipher, ST.full_name, ST.average_salary
  from students ST
  join groups G on ST.group_id = G.group_id
  join specialties S on G.specialty_id = S.specialty_id
  join faculties F on S.faculty_id = F.faculty_id
  order by F.faculty_name, S.specialty_name, G.group_full_cipher, ST.full_name
;



/* View: GROUPS_AVERAGE_SALARY */
CREATE VIEW GROUPS_AVERAGE_SALARY(
    GROUP_ID,
    AVERAGE_SALARY)
AS
select ST.group_id, avg(ST.average_salary)
  from students ST
  group by ST.group_id
;




/******************************************************************************/
/***                           Check constraints                            ***/
/******************************************************************************/

ALTER TABLE STUDENTS ADD CHECK (father_salary >= 0);
ALTER TABLE STUDENTS ADD CHECK (mother_salary >= 0);
ALTER TABLE STUDENTS ADD CHECK (family_members_number >= 1);


/******************************************************************************/
/***                           Unique constraints                           ***/
/******************************************************************************/

ALTER TABLE FACULTIES ADD UNIQUE (FACULTY_NAME);
ALTER TABLE SPECIALTIES ADD UNIQUE (SPECIALTY_CIPHER);
ALTER TABLE SPECIALTIES ADD UNIQUE (SPECIALTY_NAME);


/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE FACULTIES ADD PRIMARY KEY (FACULTY_ID);
ALTER TABLE GROUPS ADD PRIMARY KEY (GROUP_ID);
ALTER TABLE SPECIALTIES ADD PRIMARY KEY (SPECIALTY_ID);
ALTER TABLE STUDENTS ADD PRIMARY KEY (RECORD_BOOK_ID);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE GROUPS ADD FOREIGN KEY (SPECIALTY_ID) REFERENCES SPECIALTIES (SPECIALTY_ID) ON DELETE NO ACTION ON UPDATE CASCADE;
ALTER TABLE SPECIALTIES ADD FOREIGN KEY (FACULTY_ID) REFERENCES FACULTIES (FACULTY_ID) ON DELETE NO ACTION ON UPDATE CASCADE;
ALTER TABLE STUDENTS ADD FOREIGN KEY (GROUP_ID) REFERENCES GROUPS (GROUP_ID) ON DELETE NO ACTION ON UPDATE CASCADE;


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE UNIQUE INDEX GROUP_INDEX ON GROUPS (GROUP_CIPHER, ENTERING_YEAR, GROUP_NUMBER);


/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE DELETE_FACULTY (
    FACULTY_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from specialties S
    where S.faculty_id = :faculty_id
    into :c;

  if (:c > 0) then
    exception faculty_not_empty_error;

  delete from faculties F where F.faculty_id = :faculty_id;
end^


ALTER PROCEDURE DELETE_GROUP (
    GROUP_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from students ST
    where ST.group_id = :group_id
    into :c;

  if (:c > 0) then
    exception group_not_empty_error;

  delete from groups G where G.group_id=:group_id;
end^


ALTER PROCEDURE DELETE_SPECIALTY (
    SPECIALTY_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from groups G
    where G.specialty_id = :specialty_id
    into :c;

  if (:c > 0) then
    exception specialty_not_empty_error;

  delete from specialties S where S.specialty_id = :specialty_id;
end^


ALTER PROCEDURE DELETE_STUDENT (
    RECORD_BOOK_ID INTEGER)
AS
begin
  delete from students ST where ST.record_book_id=:record_book_id;
end^


ALTER PROCEDURE FACULTY_QUALIFICATIONS (
    FACULTY_ID INTEGER)
RETURNS (
    SPECIALTY_NAME VARCHAR(50),
    QUALIFICATION VARCHAR(50))
AS
begin
  -- Список квалификаций определенного факультета --

  for select S.qualification, S.specialty_name
        from specialties S
        where S.faculty_id = :faculty_id
        order by S.qualification
        into :specialty_name, :qualification do

  suspend;
end^


ALTER PROCEDURE GROUP_AVERAGE_SALARY (
    GROUP_ID INTEGER)
RETURNS (
    FACULTY_NAME VARCHAR(50),
    SPECIALTY_NAME VARCHAR(50),
    GROUP_FULL_CIPHER VARCHAR(10),
    AVERAGE_SALARY NUMERIC(18,2))
AS
begin
  -- Средний доход для определенной группы --

  for select F.faculty_name, S.specialty_name, G.group_full_cipher, GAS.average_salary
        from groups_average_salary GAS
        join groups G on GAS.group_id = G.group_id
        join specialties S on G.specialty_id = S.specialty_id
        join faculties F on S.faculty_id = F.faculty_id
        where G.group_id = :group_id
        order by F.faculty_name, S.specialty_name, G.group_full_cipher
        into :faculty_name, :specialty_name, :group_full_cipher, :average_salary do

  suspend;
end^


ALTER PROCEDURE GROUPS_ENTERED_SINCE_YEAR (
    MIN_ENTERING_YEAR INTEGER)
RETURNS (
    GROUP_FULL_CIPHER VARCHAR(10),
    SPECIALTY_NAME VARCHAR(50))
AS
begin
  -- Группы, поступившие с определенного года. --

  for select G.group_full_cipher, S.specialty_name
        from groups G
        join specialties S on G.specialty_id = S.specialty_id
        where G.entering_year >= :min_entering_year
        order by G.group_full_cipher, S.specialty_name
        into :group_full_cipher, :specialty_name do

  suspend;
end^


ALTER PROCEDURE INSERT_FACULTY (
    FACULTY_NAME VARCHAR(50),
    DIRECTOR_NAME VARCHAR(50))
AS
declare variable C integer;
begin
  select count(*) from faculties F
    where F.faculty_name = :faculty_name
    into :c;

  if (:c > 0) then
    exception faculty_exists_error;

  insert into faculties (faculty_id, faculty_name, director_name)
                 values (gen_id(faculty_id_generator, 1), :faculty_name, :director_name);
end^


ALTER PROCEDURE INSERT_GROUP (
    GROUP_CIPHER VARCHAR(5),
    ENTERING_YEAR INTEGER,
    GROUP_NUMBER INTEGER,
    SPECIALTY_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from groups G
    where G.group_cipher=:group_cipher
      and G.entering_year=:entering_year
      and G.group_number=:group_number
    into :c;

  if (:c > 0) then
    exception group_exists_error;

  select count(*) from specialties S
    where S.specialty_id = :specialty_id
    into :c;

  if (:c = 0) then
    exception specialty_not_exists_error;

  insert into groups (group_id, group_cipher, entering_year, group_number, specialty_id)
              values (gen_id(group_id_generator, 1), :group_cipher, :entering_year,
                                                     :group_number, :specialty_id);
end^


ALTER PROCEDURE INSERT_SPECIALTY (
    SPECIALTY_CIPHER VARCHAR(5),
    SPECIALTY_NAME VARCHAR(50),
    QUALIFICATION VARCHAR(50),
    FACULTY_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from specialties S
    where S.specialty_cipher = :specialty_cipher
       or S.specialty_name = :specialty_name
    into :c;

  if (:c > 0) then
    exception specialty_exists_error;

  select count(*) from faculties F
    where F.faculty_id = :faculty_id
    into :c;

  if (:c = 0) then
    exception faculty_not_exists_error;

  insert into specialties (specialty_id, specialty_cipher, specialty_name, qualification, faculty_id)
                 values (gen_id(specialty_id_generator, 1), :specialty_cipher, :specialty_name, :qualification, :faculty_id);
end^


ALTER PROCEDURE INSERT_STUDENT (
    RECORD_BOOK_ID INTEGER,
    LAST_NAME VARCHAR(15),
    FIRST_NAME VARCHAR(15),
    MIDDLE_NAME VARCHAR(15),
    FATHER_SALARY NUMERIC(9,2),
    MOTHER_SALARY NUMERIC(9,2),
    FAMILY_MEMBERS_NUMBER INTEGER,
    GROUP_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from students S
    where S.record_book_id=:record_book_id
    into :c;

  if (:c > 0) then
    exception student_exists_error;

  select count(*) from groups G
    where G.group_id = :group_id
    into :c;

  if (:c = 0) then
    exception group_not_exists_error;

  insert into students (record_book_id, last_name, first_name, middle_name, father_salary, mother_salary, family_members_number, group_id)
                values (:record_book_id, :last_name, :first_name, :middle_name, :father_salary, :mother_salary, :family_members_number, :group_id);
end^


ALTER PROCEDURE STUDENTS_AVERAGE_SALARY_LESS (
    GROUP_ID INTEGER,
    AVG_SALARY_MAX NUMERIC(9,2))
RETURNS (
    STUDENT_FULL_NAME VARCHAR(47),
    AVERAGE_SALARY NUMERIC(18,2))
AS
begin
  -- Студенты с доходом не более заданного (2-ой выходной документ) --

  for select ST.full_name, ST.average_salary
        from students ST
        where ST.group_id = :group_id
          and ST.average_salary <= :avg_salary_max
        order by ST.full_name
        into :student_full_name, :average_salary do

  suspend;
end^


ALTER PROCEDURE UPDATE_FACULTY (
    FACULTY_ID INTEGER,
    FACULTY_NAME VARCHAR(50),
    DIRECTOR_NAME VARCHAR(50))
AS
declare variable C integer;
begin
  select count(*) from faculties F
    where F.faculty_id <> :faculty_id
      and F.faculty_name = :faculty_name
    into :c;

  if (:c > 0) then
    exception faculty_exists_error;

  update faculties F set
    F.faculty_name = :faculty_name,
    F.director_name = :director_name
  where F.faculty_id = :faculty_id;
end^


ALTER PROCEDURE UPDATE_GROUP (
    GROUP_ID INTEGER,
    GROUP_CIPHER VARCHAR(5),
    ENTERING_YEAR INTEGER,
    GROUP_NUMBER INTEGER,
    SPECIALTY_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from groups G
    where G.group_id <> :group_id
      and G.group_cipher = :group_cipher
      and G.entering_year = :entering_year
      and G.group_number = :group_number
    into :c;

  if (:c > 0) then
    exception group_exists_error;

  select count(*) from specialties S
    where S.specialty_id = :specialty_id
    into :c;

  if (:c = 0) then
    exception specialty_not_exists_error;

  update groups G set
    G.group_cipher = :group_cipher,
    G.entering_year = :entering_year,
    G.group_number = :group_number,
    G.specialty_id = :specialty_id
  where G.group_id = :group_id;
end^


ALTER PROCEDURE UPDATE_SPECIALTY (
    SPECIALTY_ID INTEGER,
    SPECIALTY_CIPHER VARCHAR(5),
    SPECIALTY_NAME VARCHAR(50),
    QUALIFICATION VARCHAR(50),
    FACULTY_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from specialties S
    where S.specialty_id <> specialty_id
      and (S.specialty_cipher = :specialty_cipher
       or  S.specialty_name = :specialty_name)
    into :c;

  if (:c > 0) then
    exception specialty_exists_error;

  select count(*) from faculties F
    where F.faculty_id = :faculty_id
    into :c;

  if (:c = 0) then
    exception faculty_not_exists_error;

  update specialties S set
    S.specialty_cipher = :specialty_cipher,
    S.specialty_name = :specialty_name,
    S.qualification = :qualification,
    S.faculty_id = :faculty_id
  where S.specialty_id = :specialty_id;
end^


ALTER PROCEDURE UPDATE_STUDENT (
    RECORD_BOOK_ID INTEGER,
    LAST_NAME VARCHAR(15),
    FIRST_NAME VARCHAR(15),
    MIDDLE_NAME VARCHAR(15),
    FATHER_SALARY NUMERIC(9,2),
    MOTHER_SALARY NUMERIC(9,2),
    FAMILY_MEMBERS_NUMBER INTEGER,
    GROUP_ID INTEGER)
AS
begin
  update students ST set
    ST.first_name = :first_name,
    ST.last_name = :last_name,
    ST.middle_name = :middle_name,
    ST.father_salary = :father_salary,
    ST.mother_salary = :mother_salary,
    ST.family_members_number = :family_members_number,
    ST.group_id = :group_id
  where ST.record_book_id = :record_book_id;
end^



SET TERM ; ^
