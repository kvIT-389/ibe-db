/******************************************************************************/
/***          Generated by IBExpert 2021.3.29.1 23.06.2023 7:00:44          ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR CARS_GENERATOR;

CREATE GENERATOR JOURNEYS_GENERATOR;

CREATE GENERATOR REPAIRS_GENERATOR;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION CAR_ALREADY_REPAIRED_ERROR 'Машина не подлежит одному и тому же ремонту более 1-го раза.';

CREATE EXCEPTION CAR_EXISTS_ERROR 'Машина с таким номером или маркой и моделью уже существует.';

CREATE EXCEPTION CAR_JOURNEYS_NOT_NULL_ERROR 'Машина не может быть удалена, так как занималась грузоперевозками.';

CREATE EXCEPTION INCORRECT_CAR_KIND_ERROR 'Тип автомобиля должен быть только легковой (ЛЕГК) или грузовой (ГРУЗ).';

CREATE EXCEPTION JOURNEY_ALREADY_MADE_ERROR 'Одна и та же машина не может быть назначена на одну и ту же поездку более 1-го раза.';

CREATE EXCEPTION REPAIR_BOX_OCCUPIED_ERROR 'В такую дату ремонтный бокс занят.';

CREATE EXCEPTION REPAIR_EXISTS_ERROR 'Ремонт такого типа уже существует.';



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE CAR_REPAIRS_OF_KIND (
    REPAIR_KIND VARCHAR(20))
RETURNS (
    CAR_REGISTRATION_MARK VARCHAR(6),
    CAR_MODEL VARCHAR(20),
    REPAIR_BEGIN_TIME DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE CARGO_WEIGHTS_DURING_PERIOD (
    PERIOD_BEGIN DATE,
    PERIOD_END DATE)
RETURNS (
    CAR_REGISTRATION_MARK VARCHAR(6),
    CAR_MODEL VARCHAR(20),
    TOTAL_WEIGHT NUMERIC(8,3))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE DELETE_CAR (
    CAR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_CAR_JOURNEY (
    CAR_ID INTEGER,
    JOURNEY_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_CAR_REPAIR (
    CAR_ID INTEGER,
    REPAIR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_JOURNEY (
    JOURNEY_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_REPAIR (
    REPAIR_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_CAR (
    REGISTRATION_MARK VARCHAR(6),
    MODEL VARCHAR(20),
    KIND VARCHAR(4),
    COLOR VARCHAR(20))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_CAR_JOURNEY (
    CAR_ID INTEGER,
    JOURNEY_ID INTEGER,
    BEGIN_TIME DATE,
    END_TIME DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_CAR_REPAIR (
    CAR_ID INTEGER,
    REPAIR_ID INTEGER,
    BEGIN_TIME DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_JOURNEY (
    DISTANCE NUMERIC(8,3),
    WEIGHT NUMERIC(8,3),
    FROM_CITY VARCHAR(20),
    FROM_STREET VARCHAR(20),
    FROM_HOUSE VARCHAR(10),
    TO_CITY VARCHAR(20),
    TO_STREET VARCHAR(20),
    TO_HOUSE VARCHAR(10))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_REPAIR (
    KIND VARCHAR(20),
    DURATION INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INTERCITY_JOURNEYS_DURING (
    PERIOD_BEGIN DATE,
    PERIOD_END DATE)
RETURNS (
    CAR_NAME VARCHAR(27),
    WEIGHT NUMERIC(8,3),
    FROM_ADDRESS VARCHAR(54),
    TO_ADDRESS VARCHAR(54))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE UPDATE_CAR (
    CAR_ID INTEGER,
    REGISTRATION_MARK VARCHAR(6),
    MODEL VARCHAR(20),
    KIND VARCHAR(4),
    COLOR VARCHAR(20))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_CAR_JOURNEY (
    CAR_ID INTEGER,
    JOURNEY_ID INTEGER,
    BEGIN_TIME DATE,
    END_TIME DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_CAR_REPAIR (
    CAR_ID INTEGER,
    REPAIR_ID INTEGER,
    BEGIN_TIME DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_JOURNEY (
    JOURNEY_ID INTEGER,
    DISTANCE NUMERIC(8,3),
    WEIGHT NUMERIC(8,3),
    FROM_CITY VARCHAR(20),
    FROM_STREET VARCHAR(20),
    FROM_HOUSE VARCHAR(10),
    TO_CITY VARCHAR(20),
    TO_STREET VARCHAR(20),
    TO_HOUSE VARCHAR(10))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_REPAIR (
    REPAIR_ID INTEGER,
    KIND VARCHAR(20),
    DURATION INTEGER)
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE CAR_JOURNEYS (
    CAR_ID      INTEGER NOT NULL,
    JOURNEY_ID  INTEGER NOT NULL,
    BEGIN_TIME  DATE NOT NULL,
    END_TIME    DATE NOT NULL
);

CREATE TABLE CAR_REPAIRS (
    CAR_ID      INTEGER NOT NULL,
    REPAIR_ID   INTEGER NOT NULL,
    BEGIN_TIME  DATE NOT NULL
);

CREATE TABLE CARS (
    CAR_ID             INTEGER NOT NULL,
    REGISTRATION_MARK  VARCHAR(6) NOT NULL,
    MODEL              VARCHAR(20) NOT NULL,
    KIND               VARCHAR(4) NOT NULL,
    COLOR              VARCHAR(20) NOT NULL
);

CREATE TABLE JOURNEYS (
    JOURNEY_ID    INTEGER NOT NULL,
    DISTANCE      NUMERIC(8,3) NOT NULL,
    WEIGHT        NUMERIC(8,3) NOT NULL,
    FROM_CITY     VARCHAR(20) NOT NULL,
    FROM_STREET   VARCHAR(20) NOT NULL,
    FROM_HOUSE    VARCHAR(10) NOT NULL,
    FROM_ADDRESS  COMPUTED BY (from_city||', '||from_street||', '||from_house),
    TO_CITY       VARCHAR(20) NOT NULL,
    TO_STREET     VARCHAR(20) NOT NULL,
    TO_HOUSE      VARCHAR(10) NOT NULL,
    TO_ADDRESS    COMPUTED BY (to_city||', '||to_street||', '||to_house)
);

CREATE TABLE REPAIRS (
    REPAIR_ID  INTEGER NOT NULL,
    KIND       VARCHAR(20) NOT NULL,
    DURATION   INTEGER NOT NULL
);



/******************************************************************************/
/***                                 Views                                  ***/
/******************************************************************************/


/* View: ALL_CAR_REPAIRS */
CREATE VIEW ALL_CAR_REPAIRS(
    CAR_NAME,
    REPAIR_KIND,
    REPAIR_DURATION,
    REPAIR_BEGIN_TIME)
AS
select C.model||' '||C.registration_mark, R.kind, R.duration, CR.begin_time
  from car_repairs CR
  join cars C on CR.car_id=C.car_id
  join repairs R on CR.repair_id=R.repair_id
  order by R.duration, C.model
;



/* View: FAST_REPAIRS */
CREATE VIEW FAST_REPAIRS(
    REPAIR_KIND,
    REPAIR_DURATION)
AS
select R.kind, R.duration
  from repairs R
  where R.duration<=24
  order by R.kind
;



/* View: INTERCITY_JOURNEYS */
CREATE VIEW INTERCITY_JOURNEYS(
    CAR_NAME,
    WEIGHT,
    DISTANCE,
    FROM_ADDRESS,
    TO_ADDRESS,
    BEGIN_TIME,
    END_TIME)
AS
select C.registration_mark||' '||C.model, J.weight, J.distance,
       J.from_address, J.to_address, CJ.begin_time, CJ.end_time
  from car_journeys CJ
  join cars C on CJ.car_id=C.car_id
  join journeys J on CJ.journey_id=J.journey_id
  where J.from_city<>J.to_city
  order by J.from_city, J.to_city
;



/* View: TOTAL_WEIGHTS_TRANSPORTED */
CREATE VIEW TOTAL_WEIGHTS_TRANSPORTED(
    CAR_NAME,
    TOTAL_WEIGHT,
    PERIOD_BEGIN,
    PERIOD_END)
AS
select C.registration_mark||' '||C.model, sum(J.weight) TW,
       min(CJ.begin_time), max(CJ.end_time)
  from car_journeys CJ
  join cars C on CJ.car_id=C.car_id
  join journeys J on CJ.journey_id=J.journey_id
  group by C.registration_mark, C.model
  order by TW
;




/******************************************************************************/
/***                           Check constraints                            ***/
/******************************************************************************/

ALTER TABLE JOURNEYS ADD check (distance>0);
ALTER TABLE JOURNEYS ADD check (weight>0);
ALTER TABLE CARS ADD check (kind='ЛЕГК' or kind='ГРУЗ');
ALTER TABLE REPAIRS ADD check (duration>0);


/******************************************************************************/
/***                           Unique constraints                           ***/
/******************************************************************************/

ALTER TABLE CARS ADD UNIQUE (REGISTRATION_MARK);
ALTER TABLE CAR_REPAIRS ADD UNIQUE (BEGIN_TIME);
ALTER TABLE REPAIRS ADD UNIQUE (KIND);


/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE CARS ADD PRIMARY KEY (CAR_ID);
ALTER TABLE CAR_JOURNEYS ADD PRIMARY KEY (CAR_ID, JOURNEY_ID);
ALTER TABLE CAR_REPAIRS ADD PRIMARY KEY (CAR_ID, REPAIR_ID);
ALTER TABLE JOURNEYS ADD PRIMARY KEY (JOURNEY_ID);
ALTER TABLE REPAIRS ADD PRIMARY KEY (REPAIR_ID);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE CAR_JOURNEYS ADD FOREIGN KEY (CAR_ID) REFERENCES CARS (CAR_ID) ON DELETE NO ACTION ON UPDATE CASCADE;
ALTER TABLE CAR_JOURNEYS ADD FOREIGN KEY (JOURNEY_ID) REFERENCES JOURNEYS (JOURNEY_ID) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE CAR_REPAIRS ADD FOREIGN KEY (CAR_ID) REFERENCES CARS (CAR_ID) ON DELETE NO ACTION ON UPDATE CASCADE;
ALTER TABLE CAR_REPAIRS ADD FOREIGN KEY (REPAIR_ID) REFERENCES REPAIRS (REPAIR_ID) ON DELETE CASCADE ON UPDATE CASCADE;


/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE CAR_REPAIRS_OF_KIND (
    REPAIR_KIND VARCHAR(20))
RETURNS (
    CAR_REGISTRATION_MARK VARCHAR(6),
    CAR_MODEL VARCHAR(20),
    REPAIR_BEGIN_TIME DATE)
AS
begin
  for select C.registration_mark, C.model, CR.begin_time
        from car_repairs CR
        join cars C on CR.car_id=C.car_id
        join repairs R on CR.repair_id=R.repair_id
        where upper(R.kind)=upper(:repair_kind)
        order by CR.begin_time, C.model
        into :car_registration_mark, :car_model, :repair_begin_time do

  suspend;
end^


ALTER PROCEDURE CARGO_WEIGHTS_DURING_PERIOD (
    PERIOD_BEGIN DATE,
    PERIOD_END DATE)
RETURNS (
    CAR_REGISTRATION_MARK VARCHAR(6),
    CAR_MODEL VARCHAR(20),
    TOTAL_WEIGHT NUMERIC(8,3))
AS
begin
  for select C.registration_mark, C.model, sum(J.weight) TW
        from car_journeys CJ
        join cars C on CJ.car_id=C.car_id
        join journeys J on CJ.journey_id=J.journey_id
        where C.kind='ГРУЗ'
          and CJ.begin_time between :period_begin and :period_end
          and CJ.end_time   between :period_begin and :period_end
        group by C.registration_mark, C.model
        order by C.registration_mark, TW
        into :car_registration_mark, :car_model, :total_weight do

  suspend;
end^


ALTER PROCEDURE DELETE_CAR (
    CAR_ID INTEGER)
AS
declare variable c integer;
begin
    select count(*) from car_journeys
      where car_id=:car_id
      into :c;

    if (:c=0) then
      delete from cars where car_id=:car_id;
    else
      exception car_journeys_not_null_error;
end^


ALTER PROCEDURE DELETE_CAR_JOURNEY (
    CAR_ID INTEGER,
    JOURNEY_ID INTEGER)
AS
begin
    delete from car_journeys
      where car_id=:car_id
        and journey_id=:journey_id;
end^


ALTER PROCEDURE DELETE_CAR_REPAIR (
    CAR_ID INTEGER,
    REPAIR_ID INTEGER)
AS
begin
  delete from car_repairs
    where car_id=:car_id
      and repair_id=:repair_id;
end^


ALTER PROCEDURE DELETE_JOURNEY (
    JOURNEY_ID INTEGER)
AS
begin
    delete from journeys where journey_id=:journey_id;
end^


ALTER PROCEDURE DELETE_REPAIR (
    REPAIR_ID INTEGER)
AS
begin
  delete from repairs where repair_id=:repair_id;
end^


ALTER PROCEDURE INSERT_CAR (
    REGISTRATION_MARK VARCHAR(6),
    MODEL VARCHAR(20),
    KIND VARCHAR(4),
    COLOR VARCHAR(20))
AS
declare variable C integer;
begin
  if (upper(:kind)<>'ЛЕГК' and upper(:kind)<>'ГРУЗ') then
    exception incorrect_car_kind_error;

  select count(*) from cars
    where registration_mark=upper(:registration_mark)
    into :c;

  if (:c=0) then
    insert into cars values (gen_id(cars_generator,1), upper(:registration_mark),
                             :model, upper(:kind), :color);
  else
    exception car_exists_error;
end^


ALTER PROCEDURE INSERT_CAR_JOURNEY (
    CAR_ID INTEGER,
    JOURNEY_ID INTEGER,
    BEGIN_TIME DATE,
    END_TIME DATE)
AS
declare variable c integer;
begin
  select count(*) from car_journeys
    where car_id=:car_id
      and journey_id=:journey_id
    into :c;

  if (:c=0) then
    insert into car_journeys values (:car_id, :journey_id,
                                     :begin_time, :end_time);
  else
    exception journey_already_made_error;
end^


ALTER PROCEDURE INSERT_CAR_REPAIR (
    CAR_ID INTEGER,
    REPAIR_ID INTEGER,
    BEGIN_TIME DATE)
AS
declare variable c integer;
begin
  select count(*) from car_repairs
    where begin_time=:begin_time
    into :c;

  if (:c>0) then
    exception repair_box_occupied_error;

  select count(*) from car_repairs
    where car_id=:car_id
      and repair_id=:repair_id
    into :c;

  if (:c=0) then
    insert into car_repairs values (:car_id, :repair_id, :begin_time);
  else
    exception car_already_repaired_error;
end^


ALTER PROCEDURE INSERT_JOURNEY (
    DISTANCE NUMERIC(8,3),
    WEIGHT NUMERIC(8,3),
    FROM_CITY VARCHAR(20),
    FROM_STREET VARCHAR(20),
    FROM_HOUSE VARCHAR(10),
    TO_CITY VARCHAR(20),
    TO_STREET VARCHAR(20),
    TO_HOUSE VARCHAR(10))
AS
begin
    insert into journeys values (gen_id(journeys_generator,1), :distance, :weight,
                                 :from_city, :from_street, :from_house,
                                 :to_city, :to_street, :to_house);
end^


ALTER PROCEDURE INSERT_REPAIR (
    KIND VARCHAR(20),
    DURATION INTEGER)
AS
declare variable c integer;
begin
  select count(*) from repairs
    where upper(kind)=upper(:kind)
  into :c;

  if (:c=0) then
    insert into repairs values (gen_id(repairs_generator,1),
                                :kind, :duration);
  else
    exception repair_exists_error;
end^


ALTER PROCEDURE INTERCITY_JOURNEYS_DURING (
    PERIOD_BEGIN DATE,
    PERIOD_END DATE)
RETURNS (
    CAR_NAME VARCHAR(27),
    WEIGHT NUMERIC(8,3),
    FROM_ADDRESS VARCHAR(54),
    TO_ADDRESS VARCHAR(54))
AS
begin
  for select IJ.car_name, IJ.weight, IJ.from_address, IJ.to_address
        from intercity_journeys IJ
        where IJ.begin_time between :period_begin and :period_end
          and IJ.end_time   between :period_begin and :period_end
        into :car_name, :weight, :from_address, :to_address do

  suspend;
end^


ALTER PROCEDURE UPDATE_CAR (
    CAR_ID INTEGER,
    REGISTRATION_MARK VARCHAR(6),
    MODEL VARCHAR(20),
    KIND VARCHAR(4),
    COLOR VARCHAR(20))
AS
declare variable C integer;
begin
  if (upper(:kind)<>'ЛЕГК' and upper(:kind)<>'ГРУЗ') then
    exception incorrect_car_kind_error;

  update cars set
    registration_mark=upper(:registration_mark),
    model=:model,
    kind=upper(:kind),
    color=:color
  where car_id=:car_id;

  select count(*) from cars
    where :registration_mark=upper(:registration_mark)
    into :c;

  if (:c>1) then
    exception car_exists_error;
end^


ALTER PROCEDURE UPDATE_CAR_JOURNEY (
    CAR_ID INTEGER,
    JOURNEY_ID INTEGER,
    BEGIN_TIME DATE,
    END_TIME DATE)
AS
begin
  update car_journeys set
    begin_time=:begin_time,
    end_time=:end_time
  where car_id=:car_id
    and journey_id=:journey_id;
end^


ALTER PROCEDURE UPDATE_CAR_REPAIR (
    CAR_ID INTEGER,
    REPAIR_ID INTEGER,
    BEGIN_TIME DATE)
AS
declare variable c integer;
begin
  update car_repairs set
    begin_time=:begin_time
  where car_id=:car_id
    and repair_id=:repair_id;

  select count(*) from car_repairs
    where begin_time=:begin_time
    into :c;

  if (:c>1) then
    exception repair_box_occupied_error;
end^


ALTER PROCEDURE UPDATE_JOURNEY (
    JOURNEY_ID INTEGER,
    DISTANCE NUMERIC(8,3),
    WEIGHT NUMERIC(8,3),
    FROM_CITY VARCHAR(20),
    FROM_STREET VARCHAR(20),
    FROM_HOUSE VARCHAR(10),
    TO_CITY VARCHAR(20),
    TO_STREET VARCHAR(20),
    TO_HOUSE VARCHAR(10))
AS
begin
    update journeys set
      distance=:distance,
      weight=:weight,
      from_city=:from_city,
      from_street=:from_street,
      from_house=:from_house,
      to_city=:to_city,
      to_street=:to_street,
      to_house=:to_house
    where journey_id=:journey_id;
end^


ALTER PROCEDURE UPDATE_REPAIR (
    REPAIR_ID INTEGER,
    KIND VARCHAR(20),
    DURATION INTEGER)
AS
declare variable c integer;
begin
  update repairs set
    kind=:kind,
    duration=:duration
  where repair_id=:repair_id;

  select count(*) from repairs
    where kind=:kind
    into :c;

  if (:c>1) then
    exception repair_exists_error;
end^



SET TERM ; ^
