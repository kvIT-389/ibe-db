/******************************************************************************/
/***         Generated by IBExpert 2021.3.29.1 23.06.2023 11:39:04          ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR BOOKS_GENERATOR;

CREATE GENERATOR CATEGORIES_GENERATOR;

CREATE GENERATOR READERS_GENERATOR;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION BOOK_ALREADY_BORROWED_ERROR 'Данная книга уже на руках у одного из читателей.';

CREATE EXCEPTION BOOK_EXISTS_ERROR 'У данного автора уже есть книга с таким названием.';

CREATE EXCEPTION BOOK_NOT_RETURNED_ERROR 'Запись не может быть удалена, так как книга еще не возвращена в библиотеку.';

CREATE EXCEPTION BORROW_EXISTS_ERROR 'Данный читатель уже брал эту книгу в эту дату.';

CREATE EXCEPTION CATEGORY_EXISTS_ERROR 'Раздел с таким названием уже существует.';

CREATE EXCEPTION CATEGORY_NOT_EMPTY_ERROR 'Раздел не может быть удален, так как содержит книги.';

CREATE EXCEPTION READER_EXISTS_ERROR 'Читатель с такими паспортными данными уже существует.';

CREATE EXCEPTION READER_HAS_BOOK_ERROR 'Читатель не может быть удален, так как имеет на руках книгу(и).';



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE BOOKS_PAGES_PUBLISH_AFTER (
    PAGES_COUNT_MIN INTEGER,
    PAGES_COUNT_MAX INTEGER,
    MIN_PUBLISH_YEAR INTEGER)
RETURNS (
    BOOK_NAME VARCHAR(40),
    BOOK_AUTHOR VARCHAR(40),
    PAGES_COUNT INTEGER,
    PUBLISH_YEAR INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE DELETE_BOOK (
    BOOK_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_BORROW (
    BOOK_ID INTEGER,
    READER_ID INTEGER,
    BORROW_DATE DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_CATEGORY (
    CATEGORY_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_READER (
    READER_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_BOOK (
    BOOK_NAME VARCHAR(40),
    BOOK_AUTHOR VARCHAR(40),
    PAGES_COUNT INTEGER,
    PUBLISH_YEAR INTEGER,
    CATEGORY_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_BORROW (
    BOOK_ID INTEGER,
    READER_ID INTEGER,
    BORROW_DATE DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_CATEGORY (
    CATEGORY_NAME VARCHAR(40))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_READER (
    LAST_NAME VARCHAR(20),
    FIRST_NAME VARCHAR(20),
    MIDDLE_NAME VARCHAR(20),
    HOME_ADDRESS VARCHAR(60),
    PASSPORT VARCHAR(60))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE READER_CATEGORY_READ_BOOKS (
    READER_FULL_NAME VARCHAR(62),
    CATEGORY_NAME VARCHAR(40))
RETURNS (
    BOOK_NAME VARCHAR(40),
    BOOK_AUTHOR VARCHAR(40),
    BORROW_DATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE UPDATE_BOOK (
    BOOK_ID INTEGER,
    BOOK_NAME VARCHAR(40),
    BOOK_AUTHOR VARCHAR(40),
    PAGES_COUNT INTEGER,
    PUBLISH_YEAR INTEGER,
    CATEGORY_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_BORROW (
    BOOK_ID INTEGER,
    READER_ID INTEGER,
    BORROW_DATE DATE,
    RETURN_DATE DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_CATEGORY (
    CATEGORY_ID INTEGER,
    CATEGORY_NAME VARCHAR(40))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_READER (
    READER_ID INTEGER,
    LAST_NAME VARCHAR(20),
    FIRST_NAME VARCHAR(20),
    MIDDLE_NAME VARCHAR(20),
    HOME_ADDRESS VARCHAR(60),
    PASSPORT VARCHAR(60))
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE BOOKS (
    BOOK_ID       INTEGER NOT NULL,
    BOOK_NAME     VARCHAR(40) NOT NULL,
    BOOK_AUTHOR   VARCHAR(40) NOT NULL,
    PAGES_COUNT   INTEGER NOT NULL,
    PUBLISH_YEAR  INTEGER NOT NULL,
    CATEGORY_ID   INTEGER NOT NULL
);

CREATE TABLE BORROWS (
    BOOK_ID      INTEGER NOT NULL,
    READER_ID    INTEGER NOT NULL,
    BORROW_DATE  DATE NOT NULL,
    RETURN_DATE  DATE
);

CREATE TABLE CATEGORIES (
    CATEGORY_ID    INTEGER NOT NULL,
    CATEGORY_NAME  VARCHAR(40) NOT NULL
);

CREATE TABLE READERS (
    READER_ID     INTEGER NOT NULL,
    LAST_NAME     VARCHAR(20) NOT NULL,
    FIRST_NAME    VARCHAR(20) NOT NULL,
    MIDDLE_NAME   VARCHAR(20) NOT NULL,
    FULL_NAME     COMPUTED BY (LAST_NAME||' '||FIRST_NAME||' '||MIDDLE_NAME),
    HOME_ADDRESS  VARCHAR(60) NOT NULL,
    PASSPORT      VARCHAR(60) NOT NULL
);



/******************************************************************************/
/***                                 Views                                  ***/
/******************************************************************************/


/* View: BORROWED_BOOKS */
CREATE VIEW BORROWED_BOOKS(
    READER_FULL_NAME,
    BOOK_NAME,
    BOOK_AUTHOR,
    BORROW_DATE)
AS
select R.full_name, BK.book_name, BK.book_author, BR.borrow_date
  from borrows BR
    join readers R on BR.reader_id=R.reader_id
    join books BK on BR.book_id=BK.book_id
  where BR.return_date is null
  order by BR.borrow_date
;



/* View: BORROWED_BOOKS_COUNT */
CREATE VIEW BORROWED_BOOKS_COUNT(
    READER_FULL_NAME,
    BORROWED_BOOKS_COUNT)
AS
select R.full_name, count(BK.book_name)
  from borrows BR
    join readers R on BR.reader_id=R.reader_id
    join books BK on BR.book_id=BK.book_id
  where BR.return_date is null
  group by R.full_name
  order by R.full_name
;



/* View: READERS_READ_BOOKS */
CREATE VIEW READERS_READ_BOOKS(
    READER_FULL_NAME,
    BOOK_NAME,
    BOOK_AUTHOR,
    CATEGORY_NAME,
    BORROW_DATE,
    RETURN_DATE)
AS
select R.full_name, BK.book_name, BK.book_author, C.category_name, BR.borrow_date, BR.return_date
  from borrows BR
    join readers R on BR.reader_id=R.reader_id
    join books BK on BR.book_id=BK.book_id
    join categories C on BK.category_id=C.category_id
  where BR.return_date is not null
  order by R.full_name, BK.book_name, BK.book_author, BR.borrow_date
;



/* View: READERS_CATEGORY_READ_COUNT */
CREATE VIEW READERS_CATEGORY_READ_COUNT(
    READER_FULL_NAME,
    CATEGORY_NAME,
    READ_BOOKS_COUNT)
AS
select reader_full_name, category_name, count(category_name)
  from readers_read_books
  group by reader_full_name, category_name
;




/******************************************************************************/
/***                           Check constraints                            ***/
/******************************************************************************/

ALTER TABLE BOOKS ADD CHECK (PAGES_COUNT>0);


/******************************************************************************/
/***                           Unique constraints                           ***/
/******************************************************************************/

ALTER TABLE CATEGORIES ADD UNIQUE (CATEGORY_NAME);
ALTER TABLE READERS ADD UNIQUE (PASSPORT);


/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE BOOKS ADD PRIMARY KEY (BOOK_ID);
ALTER TABLE BORROWS ADD PRIMARY KEY (BOOK_ID, READER_ID, BORROW_DATE);
ALTER TABLE CATEGORIES ADD PRIMARY KEY (CATEGORY_ID);
ALTER TABLE READERS ADD PRIMARY KEY (READER_ID);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE BOOKS ADD FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES (CATEGORY_ID) ON DELETE NO ACTION ON UPDATE CASCADE;
ALTER TABLE BORROWS ADD FOREIGN KEY (BOOK_ID) REFERENCES BOOKS (BOOK_ID) ON DELETE NO ACTION ON UPDATE CASCADE;
ALTER TABLE BORROWS ADD FOREIGN KEY (READER_ID) REFERENCES READERS (READER_ID) ON DELETE NO ACTION ON UPDATE CASCADE;


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE UNIQUE INDEX BOOKS_INDEX ON BOOKS (BOOK_NAME, BOOK_AUTHOR);


/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE BOOKS_PAGES_PUBLISH_AFTER (
    PAGES_COUNT_MIN INTEGER,
    PAGES_COUNT_MAX INTEGER,
    MIN_PUBLISH_YEAR INTEGER)
RETURNS (
    BOOK_NAME VARCHAR(40),
    BOOK_AUTHOR VARCHAR(40),
    PAGES_COUNT INTEGER,
    PUBLISH_YEAR INTEGER)
AS
begin
  for select BK.book_name, BK.book_author, BK.pages_count, BK.publish_year
        from books BK
        where BK.pages_count between :pages_count_min and :pages_count_max
          and BK.publish_year>:min_publish_year
        order by BK.book_name, BK.book_author, BK.pages_count
        into :book_name, :book_author, :pages_count, :publish_year do

  suspend;
end^


ALTER PROCEDURE DELETE_BOOK (
    BOOK_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from borrows BR
    where BR.book_id=:book_id
      and BR.return_date is null
    into :c;

  if (:c=0) then
    delete from books BK where Bk.book_id=:book_id; 
  else
    exception book_not_returned_error;
end^


ALTER PROCEDURE DELETE_BORROW (
    BOOK_ID INTEGER,
    READER_ID INTEGER,
    BORROW_DATE DATE)
AS
declare variable C integer;
begin
  select count(*) from borrows BR
    where BR.book_id=:book_id
      and BR.reader_id=:reader_id
      and BR.borrow_date=:borrow_date
      and BR.return_date is null
    into :c;

  if (:c=0) then
    delete from borrows BR where BR.book_id=:book_id
                             and BR.reader_id=:reader_id
                             and BR.borrow_date=:borrow_date;
  else
    exception book_not_returned_error;
end^


ALTER PROCEDURE DELETE_CATEGORY (
    CATEGORY_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from books BK
    where BK.category_id=:category_id
    into :c;

  if (:c=0) then
    delete from categories C where C.category_id=:category_id;
  else
    exception category_not_empty_error;
end^


ALTER PROCEDURE DELETE_READER (
    READER_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from borrows BR
    where BR.reader_id=:reader_id
      and BR.return_date is null
    into :c;

  if (:c=0) then
    delete from readers R where R.reader_id=:reader_id;
  else
    exception reader_has_book_error;
end^


ALTER PROCEDURE INSERT_BOOK (
    BOOK_NAME VARCHAR(40),
    BOOK_AUTHOR VARCHAR(40),
    PAGES_COUNT INTEGER,
    PUBLISH_YEAR INTEGER,
    CATEGORY_ID INTEGER)
AS
declare variable C integer;
begin
  select count(*) from books BK
    where BK.book_name=:book_name
      and BK.book_author=:book_author
    into :c;

  if (:c=0) then
    insert into books values (gen_id(books_generator,1), :book_name, :book_author,
                              :pages_count, :publish_year, :category_id);
  else
    exception book_exists_error;
end^


ALTER PROCEDURE INSERT_BORROW (
    BOOK_ID INTEGER,
    READER_ID INTEGER,
    BORROW_DATE DATE)
AS
declare variable C integer;
begin
  select count(*) from borrows BR
    where BR.book_id=:book_id
      and BR.reader_id=:reader_id
      and BR.borrow_date=:borrow_date
    into :c;

  if (:c>0) then
    exception borrow_exists_error;

  select count(*) from borrows BR
    where BR.book_id=:book_id
      and BR.return_date is null
    into :c;

  if (:c>0) then
    exception book_already_borrowed_error;

  insert into borrows (book_id, reader_id, borrow_date) values
                      (:book_id, :reader_id, :borrow_date);
end^


ALTER PROCEDURE INSERT_CATEGORY (
    CATEGORY_NAME VARCHAR(40))
AS
declare variable C integer;
begin
  select count(*) from categories C
    where C.category_name=:category_name
    into :c;

  if (:c=0) then
    insert into categories values (gen_id(categories_generator,1), :category_name);
  else
    exception category_exists_error;
end^


ALTER PROCEDURE INSERT_READER (
    LAST_NAME VARCHAR(20),
    FIRST_NAME VARCHAR(20),
    MIDDLE_NAME VARCHAR(20),
    HOME_ADDRESS VARCHAR(60),
    PASSPORT VARCHAR(60))
AS
declare variable C integer;
begin
  select count(*) from readers R
    where R.passport=:passport
    into :c;

  if (:c=0) then
    insert into readers values (gen_id(readers_generator,1), :last_name, :first_name,
                                :middle_name, :home_address, :passport);
  else
    exception reader_exists_error;
end^


ALTER PROCEDURE READER_CATEGORY_READ_BOOKS (
    READER_FULL_NAME VARCHAR(62),
    CATEGORY_NAME VARCHAR(40))
RETURNS (
    BOOK_NAME VARCHAR(40),
    BOOK_AUTHOR VARCHAR(40),
    BORROW_DATE DATE)
AS
begin
  for select RRB.book_name, RRB.book_author, RRB.borrow_date
        from readers_read_books RRB
        where RRB.reader_full_name=:reader_full_name
          and RRB.category_name=:category_name
        order by RRB.borrow_date
        into :book_name, :book_author, :borrow_date do

  suspend;
end^


ALTER PROCEDURE UPDATE_BOOK (
    BOOK_ID INTEGER,
    BOOK_NAME VARCHAR(40),
    BOOK_AUTHOR VARCHAR(40),
    PAGES_COUNT INTEGER,
    PUBLISH_YEAR INTEGER,
    CATEGORY_ID INTEGER)
AS
declare variable C integer;
begin
  update books BK set
    BK.book_name=:book_name,
    BK.book_author=:book_author,
    BK.pages_count=:pages_count,
    BK.publish_year=:publish_year,
    BK.category_id=:category_id
  where BK.book_id=:book_id;

  select count(*) from books BK
    where BK.book_name=:book_name
      and BK.book_author=:book_author
    into :c;

  if (:c>1) then
    exception book_exists_error;
end^


ALTER PROCEDURE UPDATE_BORROW (
    BOOK_ID INTEGER,
    READER_ID INTEGER,
    BORROW_DATE DATE,
    RETURN_DATE DATE)
AS
declare variable C integer;
begin
  update borrows BR set
    BR.return_date=:return_date
  where BR.book_id=:book_id
    and BR.reader_id=:reader_id
    and BR.borrow_date=:borrow_date;

  select count(*) from borrows BR
    where BR.book_id=:book_id
      and BR.reader_id=:reader_id
      and BR.borrow_date=:borrow_date
    into :c;

  if (:c>1) then
    exception borrow_exists_error;

  select count(*) from borrows BR
    where BR.book_id=:book_id
      and BR.return_date is null
    into :c;

  if (:c>1) then
    exception book_already_borrowed_error;
end^


ALTER PROCEDURE UPDATE_CATEGORY (
    CATEGORY_ID INTEGER,
    CATEGORY_NAME VARCHAR(40))
AS
declare variable C integer;
begin
  update categories C set
    C.category_name=:category_name
  where C.category_id=category_id;

  select count(*) from categories C
    where C.category_name=:category_name
    into :c;

  if (:c>1) then
    exception category_exists_error;
end^


ALTER PROCEDURE UPDATE_READER (
    READER_ID INTEGER,
    LAST_NAME VARCHAR(20),
    FIRST_NAME VARCHAR(20),
    MIDDLE_NAME VARCHAR(20),
    HOME_ADDRESS VARCHAR(60),
    PASSPORT VARCHAR(60))
AS
declare variable C integer;
begin
  update readers R set
    R.last_name=:last_name,
    R.first_name=:first_name,
    R.middle_name=:middle_name,
    R.home_address=:home_address,
    R.passport=:passport
  where R.reader_id=:reader_id;

  select count(*) from readers R
    where R.passport=:passport
    into :c;

  if (:c>1) then
    exception reader_exists_error;
end^



SET TERM ; ^
