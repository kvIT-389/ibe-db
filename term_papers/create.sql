/******************************************************************************/
/***          Generated by IBExpert 2021.3.29.1 23.06.2023 7:13:21          ***/
/******************************************************************************/

/******************************************************************************/
/***      Following SET SQL DIALECT is just for the Database Comparer       ***/
/******************************************************************************/
SET SQL DIALECT 3;



/******************************************************************************/
/***                               Generators                               ***/
/******************************************************************************/

CREATE GENERATOR SUBJECTS_GENERATOR;

CREATE GENERATOR TERM_PAPERS_GENERATOR;



/******************************************************************************/
/***                               Exceptions                               ***/
/******************************************************************************/

CREATE EXCEPTION GRADE_RECORD_EXISTS_ERROR 'Данный студент уже имеет запись в ведомости по курсовой по данному предмету.';

CREATE EXCEPTION STUDENT_EXISTS_ERROR 'Студент с таким номером зачетки уже существует.';

CREATE EXCEPTION SUBJECT_EXISTS_ERROR 'Предмет с таким названием уже существует.';

CREATE EXCEPTION SUBJECT_USING_ERROR 'Предмет не может быть удален, так как по нему имеются курсовые.';

CREATE EXCEPTION TERM_PAPER_EXISTS_ERROR 'Курсовая по данному предмету с таким вариантом уже существует.';

CREATE EXCEPTION TERM_PAPER_WRITING_ERROR 'Курсовая не может быть удалена, так как ее пишет студент.';



/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

CREATE PROCEDURE DELETE_GRADE_RECORD (
    GRADES_BOOK_NUMBER INTEGER,
    TERM_PAPER_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_STUDENT (
    GRADES_BOOK_NUMBER INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_SUBJECT (
    SUBJECT_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE DELETE_TERM_PAPER (
    TERM_PAPER_ID INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE GROUP_SUBJECT_GRADES (
    GROUP_CIPHER VARCHAR(10),
    SUBJECT_NAME VARCHAR(20))
RETURNS (
    STUDENT_FULL_NAME VARCHAR(62),
    GRADE INTEGER)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE INSERT_GRADE_RECORD (
    GRADES_BOOK_NUMBER INTEGER,
    TERM_PAPER_ID INTEGER,
    GET_DATE DATE)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_STUDENT (
    GRADES_BOOK_NUMBER INTEGER,
    LAST_NAME VARCHAR(20),
    FIRST_NAME VARCHAR(20),
    MIDDLE_NAME VARCHAR(20),
    GROUP_CIPHER VARCHAR(10))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_SUBJECT (
    SUBJECT_NAME VARCHAR(20),
    HOURS_NUMBER INTEGER,
    TEACHER_FULL_NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE INSERT_TERM_PAPER (
    SUBJECT_ID INTEGER,
    VARIANT_NUMBER INTEGER,
    TOPIC_NAME VARCHAR(80))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE STUDENTS_FINISHED_BEFORE_DATE (
    SUBJECT_NAME VARCHAR(20),
    LATEST_DATE DATE)
RETURNS (
    GROUP_CIPHER VARCHAR(10),
    STUDENT_FULL_NAME VARCHAR(62),
    FINISH_DATE DATE)
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE SUBJECT_AVERAGE_GRADES (
    SUBJECT_NAME VARCHAR(20))
RETURNS (
    GROUP_CIPHER VARCHAR(10),
    AVERAGE_GRADE NUMERIC(2,1))
AS
BEGIN
  SUSPEND;
END^





CREATE PROCEDURE UPDATE_GRADE_RECORD (
    GRADES_BOOK_NUMBER INTEGER,
    TERM_PAPER_ID INTEGER,
    GET_DATE DATE,
    FINISH_DATE DATE,
    GRADE INTEGER)
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_STUDENT (
    GRADES_BOOK_NUMBER INTEGER,
    LAST_NAME VARCHAR(20),
    FIRST_NAME VARCHAR(20),
    MIDDLE_NAME VARCHAR(20),
    GROUP_CIPHER VARCHAR(10))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_SUBJECT (
    SUBJECT_ID INTEGER,
    SUBJECT_NAME VARCHAR(20),
    HOURS_NUMBER INTEGER,
    TEACHER_FULL_NAME VARCHAR(50))
AS
BEGIN
  EXIT;
END^





CREATE PROCEDURE UPDATE_TERM_PAPER (
    TERM_PAPER_ID INTEGER,
    SUBJECT_ID INTEGER,
    VARIANT_NUMBER INTEGER,
    TOPIC_NAME VARCHAR(80))
AS
BEGIN
  EXIT;
END^






SET TERM ; ^



/******************************************************************************/
/***                                 Tables                                 ***/
/******************************************************************************/



CREATE TABLE GRADES_RECORDS (
    GRADES_BOOK_NUMBER  INTEGER NOT NULL,
    TERM_PAPER_ID       INTEGER NOT NULL,
    GET_DATE            DATE NOT NULL,
    FINISH_DATE         DATE,
    GRADE               INTEGER
);

CREATE TABLE STUDENTS (
    GRADES_BOOK_NUMBER  INTEGER NOT NULL,
    LAST_NAME           VARCHAR(20) NOT NULL,
    FIRST_NAME          VARCHAR(20) NOT NULL,
    MIDDLE_NAME         VARCHAR(20) NOT NULL,
    FULL_NAME           COMPUTED BY (last_name||' '||first_name||' '||middle_name),
    GROUP_CIPHER        VARCHAR(10) NOT NULL
);

CREATE TABLE SUBJECTS (
    SUBJECT_ID         INTEGER NOT NULL,
    SUBJECT_NAME       VARCHAR(20) NOT NULL,
    HOURS_NUMBER       INTEGER NOT NULL,
    TEACHER_FULL_NAME  VARCHAR(50) NOT NULL
);

CREATE TABLE TERM_PAPERS (
    TERM_PAPER_ID   INTEGER NOT NULL,
    SUBJECT_ID      INTEGER NOT NULL,
    VARIANT_NUMBER  INTEGER NOT NULL,
    TOPIC_NAME      VARCHAR(80) NOT NULL
);



/******************************************************************************/
/***                                 Views                                  ***/
/******************************************************************************/


/* View: NOT_FINISHED_STUDENTS */
CREATE VIEW NOT_FINISHED_STUDENTS(
    GROUP_CIPHER,
    STUDENT_FULL_NAME,
    SUBJECT_NAME,
    SUBJECT_TEACHER)
AS
select ST.group_cipher, ST.full_name, SB.subject_name, SB.teacher_full_name
  from grades_records GR
    join students ST on GR.grades_book_number=ST.grades_book_number
    join term_papers TP on GR.term_paper_id=TP.term_paper_id
    join subjects SB on TP.subject_id=SB.subject_id
  where GR.grade is null
  order by ST.group_cipher, ST.full_name
;



/* View: TERM_PAPERS_TOPICS */
CREATE VIEW TERM_PAPERS_TOPICS(
    SUBJECT_NAME,
    TERM_PAPER_VARIANT,
    TERM_PAPER_TOPIC)
AS
select SB.subject_name, TP.variant_number, TP.topic_name
  from term_papers TP
    join subjects SB on TP.subject_id=SB.subject_id
  order by SB.subject_name, TP.variant_number
;



/* View: TERM_PAPERS_TOPICS_COUNT */
CREATE VIEW TERM_PAPERS_TOPICS_COUNT(
    SUBJECT_NAME,
    TOTAL_SUBJECT_TOPICS)
AS
select SB.subject_name, count(TP.topic_name)
  from term_papers TP
    join subjects SB on TP.subject_id=SB.subject_id
  group by SB.subject_name
  order by SB.subject_name
;




/******************************************************************************/
/***                           Check constraints                            ***/
/******************************************************************************/

ALTER TABLE SUBJECTS ADD CHECK (HOURS_NUMBER>0);
ALTER TABLE TERM_PAPERS ADD CHECK (VARIANT_NUMBER>0);
ALTER TABLE GRADES_RECORDS ADD CHECK (FINISH_DATE>=GET_DATE);
ALTER TABLE GRADES_RECORDS ADD CHECK (GRADE BETWEEN 3 AND 5);


/******************************************************************************/
/***                           Unique constraints                           ***/
/******************************************************************************/

ALTER TABLE SUBJECTS ADD UNIQUE (SUBJECT_NAME);


/******************************************************************************/
/***                              Primary keys                              ***/
/******************************************************************************/

ALTER TABLE GRADES_RECORDS ADD PRIMARY KEY (GRADES_BOOK_NUMBER, TERM_PAPER_ID);
ALTER TABLE STUDENTS ADD PRIMARY KEY (GRADES_BOOK_NUMBER);
ALTER TABLE SUBJECTS ADD PRIMARY KEY (SUBJECT_ID);
ALTER TABLE TERM_PAPERS ADD PRIMARY KEY (TERM_PAPER_ID);


/******************************************************************************/
/***                              Foreign keys                              ***/
/******************************************************************************/

ALTER TABLE GRADES_RECORDS ADD FOREIGN KEY (GRADES_BOOK_NUMBER) REFERENCES STUDENTS (GRADES_BOOK_NUMBER) ON DELETE CASCADE ON UPDATE CASCADE;
ALTER TABLE GRADES_RECORDS ADD FOREIGN KEY (TERM_PAPER_ID) REFERENCES TERM_PAPERS (TERM_PAPER_ID) ON DELETE NO ACTION ON UPDATE CASCADE;
ALTER TABLE TERM_PAPERS ADD FOREIGN KEY (SUBJECT_ID) REFERENCES SUBJECTS (SUBJECT_ID) ON DELETE NO ACTION ON UPDATE CASCADE;


/******************************************************************************/
/***                                Indices                                 ***/
/******************************************************************************/

CREATE UNIQUE INDEX TERM_PAPERS_INDEX ON TERM_PAPERS (SUBJECT_ID, VARIANT_NUMBER);


/******************************************************************************/
/***                           Stored procedures                            ***/
/******************************************************************************/



SET TERM ^ ;

ALTER PROCEDURE DELETE_GRADE_RECORD (
    GRADES_BOOK_NUMBER INTEGER,
    TERM_PAPER_ID INTEGER)
AS
BEGIN
  delete from grades_records GR where GR.grades_book_number=:grades_book_number
                                  and GR.term_paper_id=:term_paper_id;
END^


ALTER PROCEDURE DELETE_STUDENT (
    GRADES_BOOK_NUMBER INTEGER)
AS
BEGIN
  delete from students ST where ST.grades_book_number=:grades_book_number;
END^


ALTER PROCEDURE DELETE_SUBJECT (
    SUBJECT_ID INTEGER)
AS
declare variable C integer;
BEGIN
  select count(*) from term_papers TP
    where TP.subject_id=:subject_id
    into :c;

  if (:c=0) then
    delete from subjects SB where SB.subject_id=:subject_id;
  else
    exception subject_using_error;
END^


ALTER PROCEDURE DELETE_TERM_PAPER (
    TERM_PAPER_ID INTEGER)
AS
declare variable C integer;
BEGIN
  select count(*) from grades_records GR
    where GR.term_paper_id=:term_paper_id
    into :c;

  if (:c=0) then
    delete from term_papers TP where TP.term_paper_id=:term_paper_id;
  else
    exception term_paper_writing_error;
END^


ALTER PROCEDURE GROUP_SUBJECT_GRADES (
    GROUP_CIPHER VARCHAR(10),
    SUBJECT_NAME VARCHAR(20))
RETURNS (
    STUDENT_FULL_NAME VARCHAR(62),
    GRADE INTEGER)
AS
begin
  for select ST.full_name, GR.grade
        from grades_records GR
          join students ST on GR.grades_book_number=ST.grades_book_number
          join term_papers TP on GR.term_paper_id=TP.term_paper_id
          join subjects SB on TP.subject_id=SB.subject_id
        where ST.group_cipher=:group_cipher
          and SB.subject_name=:subject_name
          and GR.grade is not null
        order by ST.full_name
        into :student_full_name, :grade do

  suspend;
end^


ALTER PROCEDURE INSERT_GRADE_RECORD (
    GRADES_BOOK_NUMBER INTEGER,
    TERM_PAPER_ID INTEGER,
    GET_DATE DATE)
AS
declare variable C integer;
BEGIN
  select count(*) from grades_records GR
    where GR.grades_book_number=:grades_book_number
      and GR.term_paper_id=:term_paper_id
    into :c;

  if (:c=0) then
    insert into grades_records (grades_book_number, term_paper_id, get_date)
                        values (:grades_book_number, :term_paper_id, :get_date);
  else
    exception grade_record_exists_error;
END^


ALTER PROCEDURE INSERT_STUDENT (
    GRADES_BOOK_NUMBER INTEGER,
    LAST_NAME VARCHAR(20),
    FIRST_NAME VARCHAR(20),
    MIDDLE_NAME VARCHAR(20),
    GROUP_CIPHER VARCHAR(10))
AS
declare variable C integer;
BEGIN
  select count(*) from students ST
    where ST.grades_book_number=:grades_book_number
    into :c;

  if (:c=0) then
    insert into students values (:grades_book_number, :last_name,
                                 :first_name, :middle_name, :group_cipher);
  else
    exception student_exists_error;
END^


ALTER PROCEDURE INSERT_SUBJECT (
    SUBJECT_NAME VARCHAR(20),
    HOURS_NUMBER INTEGER,
    TEACHER_FULL_NAME VARCHAR(50))
AS
declare variable C integer;
BEGIN
  select count(*) from subjects SB
    where SB.subject_name=:subject_name
    into :c;

  if (:c=0) then
    insert into subjects values (gen_id(subjects_generator,1), :subject_name,
                                 :hours_number, :teacher_full_name);
  else
    exception subject_exists_error;
END^


ALTER PROCEDURE INSERT_TERM_PAPER (
    SUBJECT_ID INTEGER,
    VARIANT_NUMBER INTEGER,
    TOPIC_NAME VARCHAR(80))
AS
declare variable C integer;
BEGIN
  select count(*) from term_papers TP
    where TP.subject_id=:subject_id
      and TP.variant_number=:variant_number
    into :c;

  if (:c=0) then
    insert into term_papers values (gen_id(term_papers_generator,1),
                                    :subject_id, :variant_number, :topic_name);
  else
    exception term_paper_exists_error;
END^


ALTER PROCEDURE STUDENTS_FINISHED_BEFORE_DATE (
    SUBJECT_NAME VARCHAR(20),
    LATEST_DATE DATE)
RETURNS (
    GROUP_CIPHER VARCHAR(10),
    STUDENT_FULL_NAME VARCHAR(62),
    FINISH_DATE DATE)
AS
begin
  for select ST.group_cipher, ST.full_name, GR.finish_date
        from grades_records GR
          join students ST on GR.grades_book_number=ST.grades_book_number
          join term_papers TP on GR.term_paper_id=TP.term_paper_id
          join subjects SB on TP.subject_id=SB.subject_id
        where SB.subject_name=:subject_name
          and GR.finish_date is not null
          and GR.finish_date <= :latest_date
        order by ST.group_cipher, ST.full_name
        into :group_cipher, :student_full_name, :finish_date do

  suspend;
end^


ALTER PROCEDURE SUBJECT_AVERAGE_GRADES (
    SUBJECT_NAME VARCHAR(20))
RETURNS (
    GROUP_CIPHER VARCHAR(10),
    AVERAGE_GRADE NUMERIC(2,1))
AS
begin
  for select ST.group_cipher, avg(GR.grade)
        from grades_records GR
          join students ST on GR.grades_book_number=ST.grades_book_number
          join term_papers TP on GR.term_paper_id=TP.term_paper_id
          join subjects SB on TP.subject_id=SB.subject_id
        where SB.subject_name=:subject_name
        group by ST.group_cipher
        order by ST.group_cipher
        into :group_cipher, :average_grade do

  suspend;
end^


ALTER PROCEDURE UPDATE_GRADE_RECORD (
    GRADES_BOOK_NUMBER INTEGER,
    TERM_PAPER_ID INTEGER,
    GET_DATE DATE,
    FINISH_DATE DATE,
    GRADE INTEGER)
AS
declare variable C integer;
BEGIN
  update grades_records GR set
    GR.get_date=:get_date,
    GR.finish_date=:finish_date,
    GR.grade=:grade
  where GR.grades_book_number=:grades_book_number
    and GR.term_paper_id=:term_paper_id;

  select count(*) from grades_records GR
    where GR.grades_book_number=:grades_book_number
      and GR.term_paper_id=:term_paper_id
    into :c;

  if (:c>1) then
    exception grade_record_exists_error;
END^


ALTER PROCEDURE UPDATE_STUDENT (
    GRADES_BOOK_NUMBER INTEGER,
    LAST_NAME VARCHAR(20),
    FIRST_NAME VARCHAR(20),
    MIDDLE_NAME VARCHAR(20),
    GROUP_CIPHER VARCHAR(10))
AS
declare variable C integer;
BEGIN
  update students ST set
    ST.last_name=:last_name,
    ST.first_name=:first_name,
    ST.middle_name=:middle_name,
    ST.group_cipher=:group_cipher
  where ST.grades_book_number=:grades_book_number;

  select count(*) from students ST
    where ST.grades_book_number=:grades_book_number
    into :c;

  if (:c>1) then
    exception student_exists_error;
END^


ALTER PROCEDURE UPDATE_SUBJECT (
    SUBJECT_ID INTEGER,
    SUBJECT_NAME VARCHAR(20),
    HOURS_NUMBER INTEGER,
    TEACHER_FULL_NAME VARCHAR(50))
AS
declare variable C integer;
BEGIN
  update subjects SB set
    SB.subject_name=:subject_name,
    SB.hours_number=:hours_number,
    SB.teacher_full_name=:teacher_full_name
  where SB.subject_id=:subject_id;

  select count(*) from subjects SB
    where SB.subject_name=:subject_name
    into :c;

  if (:c>1) then
    exception subject_exists_error;
END^


ALTER PROCEDURE UPDATE_TERM_PAPER (
    TERM_PAPER_ID INTEGER,
    SUBJECT_ID INTEGER,
    VARIANT_NUMBER INTEGER,
    TOPIC_NAME VARCHAR(80))
AS
declare variable C integer;
BEGIN
  update term_papers TP set
    TP.subject_id=:subject_id,
    TP.variant_number=:variant_number,
    TP.topic_name=:topic_name
  where TP.term_paper_id=:term_paper_id;

  select count(*) from term_papers TP
    where TP.subject_id=:subject_id
      and TP.variant_number=:variant_number
    into :c;

  if (:c>1) then
    exception term_paper_exists_error;
END^



SET TERM ; ^
